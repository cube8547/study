/*




1. join

-- LEFT JOIN(테이블 간의 원하는 컬럼을 뽑을때 사용 -> 데이터가 같지 않아도 된다)

SELECT A1.INS_ID, A1.AD_CATE_TITLE, A2.USE_YN 
FROM ad_cate A1                                          --첫번째 테이블이 기준이고 첫번째 테이블은 전체 조회된 데이터가 나온다
LEFT JOIN AD_CONTENT A2                            -- 첫번째 테이블 옆에 이어질 두번째 테이블
ON A1.AD_CATE_SEQ = A2.SEQ;                     -- 테이블간의 연결 컬럼을 지정한다 첫번째 테이블의 값은 다 나오고 두번째 테이블은 시퀀스 넘버가 일치하는 값만 나온다 (컬럼의 순서에따라 결과값이 달라진다)
                                                                 --WHERE를 사용할 수 없다

-----------------------------------------------------------------------------------------------------------------------------------------------

--INNER JOIN (테이블간의 같은 데이터를 뽑을때 사용)

SELECT A1.INS_ID, A2.USE_YN                                 -- 뽑아낼 데이터
FROM ad_cate A1
INNER JOIN AD_CATE_JOIN A2 
ON a1.INS_ID = a2.INS_ID                                      -- 컬럼 값이 일치하는 데이터를 뽑는다
WHERE A1.INS_ID = 'system'; AND A2.USE_YN = 'Y';    -- 컬럼의 데이터 값으로 원하는 데이터를 뽑는다
                                                                         -- WHERE절을 사용하지 않으면 많은 수의 데이터가 복사되어 나옴

-----------------------------------------------------------------------------------------------------------------------------------------------

--INNER JOIN(1번 테이블과 2번 테이블 연결 2번 테이블과 3번 테이블 연결)
--3개의 테이블 조인(다 대 다)

SELECT A1.UPD_ID, '-1-', A2.INTRO_AD_SEQ, '-1-', A3.USE_YN -- -1-는 컬럼 중간 끊어주는 역할
FROM AD_CATE A1                                             --첫번째 테이블 정의
INNER JOIN AD_CATE_JOIN A2                                  --두번째 테이블 정의
ON A1.INS_ID = A2.INS_ID                                    -- 첫번재 테이블과 두번째 테이블을 연결
  INNER JOIN AD_CATE_JOIN_INNER A3                          -- 세번째 테이블 정의
  ON A2.INS_DT = A3.INS_DT                                  -- 두번째 테이블과 세번째 테이블 연결
WHERE A1.UPD_ID = 'tca'; 

아래와 같이 심플하게 나타낼 수도 있다.

 SELECT  A1.*
        ,'-1-'
        ,A2.*
        ,'-1-'
        ,A3.*
  FROM AD_CATE A1
     , AD_CATE_JOIN A2
     , AD_CATE_JOIN_INNER A3
WHERE A1.INS_ID = A2.INS_ID 
AND  A2.INS_DT = A3.INS_DT
AND A1.INS_ID = 'system';


-----------------------------------------------------------------------------------------------------------------------------------------------

HASH JOIN( 두 테이블 중 하나를 기준으로 비트맵 해시 테이블을 메모리에 올린 후 나머지 테이블을 스캔 하면서 해싱 테이블을 적용하여 
				메모리에 로딩된 테이블과 비교하여 매칭되는 데이터를 추출하는 방식의 조인이다. )
				RDBMS에 서 비용이 가장 많이 들어가는 Join 방법으로 주로 작은 Table과 큰 Table 의 Join 시 사용되어 지며 , Driving 조건과 상관없이 좋은 성능을 발휘할 수 있다. 






-----------------------------------------------------------------------------------------------------------------------------------------------


-- 데이터를 합치고 출력

SELECT UPD_ID || ' ' || AD_CATE_DESC 합친결과,
       AD_CATE_SEQ 시퀀스,
       USE_YN 사용
 FROM AD_CATE
WHERE INS_ID = 'system' 
  AND INTRO_AD_SEQ < 50; 


-----------------------------------------------------------------------------------------------------------------------------------------------


BETWEEN (숫자, 날짜 조회시 사용)

0~50사이의 데이터를 조회
AND 사용

SELECT UPD_ID || ' ' || AD_CATE_DESC 합친결과,
       AD_CATE_SEQ 시퀀스,
       USE_YN 사용
 FROM AD_CATE
WHERE INS_ID = 'system' 
  AND INTRO_AD_SEQ  BETWEEN 0 AND 50; 
  
  
  - 숫자, 날짜 조회시 0과 50사이만 빼고 조회 
  - 비트윈 앞이나, 컬럼명 앞에 NOT을 붙여서 사용한다.
  
  SELECT UPD_ID || ' ' || AD_CATE_DESC 합친결과,
       AD_CATE_SEQ 시퀀스,
       USE_YN 사용
 FROM AD_CATE
WHERE INS_ID = 'system' 
  AND NOT  INTRO_AD_SEQ  BETWEEN 0 AND 50; 

OR사용

SELECT UPD_ID || ' ' || AD_CATE_DESC 합친결과,
       AD_CATE_SEQ 시퀀스,
       USE_YN 사용
 FROM AD_CATE
WHERE INS_ID = 'system' 
  OR INTRO_AD_SEQ  BETWEEN 0 AND 50; 


-----------------------------------------------------------------------------------------------------------------------------------------------

AND : 여러개의 조건에 맞는 데이터만 출력
OR : 컬럼별로 조건 일치하면 출력 








-----------------------------------------------------------------------------------------------------------------------------------------------










*/